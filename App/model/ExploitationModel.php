<?php

    namespace Cineflix\App\Model;

    use Cineflix\Core\Util\Security;

    class ExploitationModel extends AbstractModel
    {

        protected ?string $debut = null;
        protected ?string $fin = null;
        protected bool $soon_delete = false;
        protected bool $is_out = false;
        private int $alertBefore = 2;

        public function __construct(?array $data = null)
        {
            parent::__construct($data);

            if (isset($data['debut']) && isset($data['fin'])) {
                $this->setDebut($data['debut']);
                $this->setFin($data['fin']);

                //$this->setExploitationValid();
            }


        }

        public function __get($item): mixed
        {
            switch ($item) {
                case 'debut_fr':
                    $item = ($this->debut)? $this->getDateFr($this->debut) : '';
                    break;
                case 'fin_fr':
                    $item = ($this->fin)? $this->getDateFr($this->fin) : '';
                    break;
                case 'debut':
                case 'fin':
                    $item = $this->$item;
                    break;
                default:
                    $item = parent::__get($item);
            }

            return $item;
        }
        public function setDebut(string $date): void
        {
            $this->debut = Security::sanitize($date);
        }

        public function getDebut(): string
        {
            return (!empty($this->debut)) ? $this->debut : '';
        }

        public function setFin(string $date): void
        {
            $this->fin = Security::sanitize($date);
        }

        public function getFin(): string
        {
            return (!empty($this->fin)) ? $this->fin : '';
        }

        public function isSoon(): bool
        {
            $debut = new \DateTime($this->debut);
            $now = new \DateTime();

            return $debut > $now;
        }

        public function soonCancelled(): bool
        {
            $fin = new \DateTime($this->fin);
            $alert = $fin;
            $alert->modify('-'.$this->alertBefore.' days');
            $alert = $alert->getTimestamp();

            return time() >= $alert;
        }

        public function isExpired(): bool
        {
            $fin = new \DateTime($this->fin);
            $fin = $fin->getTimestamp();

            return time() > $fin;
        }
        /*public function setExploitationValid(): void
        {
            $fin = new \DateTime($this->fin);
            $alert_target = $fin;

            $alert_target->modify('-'.$this->alertBefore.' days');
            $alert_target = $alert_target->getTimestamp();

            $fin = $fin->getTimestamp();

            $this->is_out = time() > $fin;
            $this->soon_delete = time() >= $alert_target;

            if($this->is_out) {
                $this->debut = null;
                $this->fin = null;
            }

        }*/

    }
